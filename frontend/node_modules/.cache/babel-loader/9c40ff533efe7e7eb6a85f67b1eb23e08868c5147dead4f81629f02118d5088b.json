{"ast":null,"code":"var _jsxFileName = \"/Volumes/WorkSpace/React_Course/project-16/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventsPage = props => {\n  _s();\n  const events = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n_s(EventsPage, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //TODO: Error handling here\n    // throw new Response(JSON.stringify({ message: \" Could not fetch data\" }), {\n    // \tstatus: 500,\n    // });\n    throw json({\n      message: \" Could not fetch data\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","props","_s","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","status","resData","$RefreshReg$"],"sources":["/Volumes/WorkSpace/React_Course/project-16/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\nconst EventsPage = (props) => {\n\tconst events = useLoaderData();\n\n\treturn (\n\t\t<>\n\t\t\t<EventsList events={events} />\n\t\t</>\n\t);\n};\n\nexport async function loader() {\n\tconst response = await fetch(\"http://localhost:8080/events\");\n\n\tif (!response.ok) {\n\t\t//TODO: Error handling here\n\t\t// throw new Response(JSON.stringify({ message: \" Could not fetch data\" }), {\n\t\t// \tstatus: 500,\n\t\t// });\n\t\tthrow json({ message: \" Could not fetch data\" }, { status: 500 });\n\t} else {\n\t\tconst resData = await response.json();\n\t\treturn resData.events;\n\t}\n}\n\nexport default EventsPage;\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AAEtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAClD,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B,MAAMC,MAAM,GAAGV,aAAa,CAAC,CAAC;EAE9B,oBACCI,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACCP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC7B,CAAC;AAEL,CAAC;AAACN,EAAA,CARIF,UAAU;EAAA,QACAP,aAAa;AAAA;AAAAgB,EAAA,GADvBT,UAAU;AAUhB,OAAO,eAAeU,MAAMA,CAAA,EAAG;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACjB;IACA;IACA;IACA;IACA,MAAMnB,IAAI,CAAC;MAAEoB,OAAO,EAAE;IAAwB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAClE,CAAC,MAAM;IACN,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACjB,IAAI,CAAC,CAAC;IACrC,OAAOsB,OAAO,CAACb,MAAM;EACtB;AACD;AAEA,eAAeH,UAAU;AAAC,IAAAS,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}